const DefaultTokenDefines: TokenizeDefine[] = [{
	state: DefaultState.div,
	first:(state, char) =>  state === DefaultState.default && char === "/",
			follow:(char) =>  char === "/" || char === "*";
	},
}, {
	state: DefaultState.comment_start,
	first:(state, char) =>  state === DefaultState.div && char === "/",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.comment_start,
	first:(state, char) =>  state === DefaultState.comment_start,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.block_comment_start,
	first:(state, char) =>  state === DefaultState.div && char === "*",
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_wait_end,
	first:(state, char) =>  state === DefaultState.block_comment_start && char === "*",
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_start,
	first:(state, char) =>  state === DefaultState.block_comment_start,
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_wait_end,
	first:(state, char) =>  state === DefaultState.block_comment_wait_end && char === "*",
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_end,
	first:(state, char) =>  state === DefaultState.block_comment_wait_end && char === "/",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.string_start,
	first:(state, char) =>  state === DefaultState.default && char === "\"",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.string_escape,
	first:(state, char) =>  state === DefaultState.string_start && char === "\\",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.string_start,
	first:(state, char) =>  state === DefaultState.string_escape,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.string_end,
	first:(state, char) =>  state === DefaultState.string_start && char === "\"",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.string_start,
	first:(state, char) =>  state === DefaultState.string_start,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.id,
	first:(state, char) =>  state === DefaultState.default && (isLetter(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.mark_start,
	first:(state, char) =>  state === DefaultState.default && char === "'",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.mark_end,
	first:(state, char) =>  state === DefaultState.mark_start && char === "'",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.mark_start,
	first:(state, char) =>  state === DefaultState.mark_start,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.id,
	first:(state, char) =>  state === DefaultState.id && (isLetter(char) || isNumber(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.number_0,
	first:(state, char) =>  state === DefaultState.default && char === "0",
			follow:(char) =>  char === "x" || char === "X" || is0_7(char) || char === ".";
	},
}, {
	state: DefaultState.number,
	first:(state, char) =>  state === DefaultState.default && is1_9(char),
			follow:(char) =>  isNumber(char) || char === ".";
	},
}, {
	state: DefaultState.number_16_start,
	first:(state, char) =>  state === DefaultState.number_0 && (char === "x" || char === "X"),
			follow:(char) =>  is0_16(char);
	},
}, {
	state: DefaultState.number_8,
	first:(state, char) =>  state === DefaultState.number_0 && is0_7(char),
			follow:(char) =>  is0_7(char);
	},
}, {
	state: DefaultState.double,
	first:(state, char) =>  (state === DefaultState.number_0 || state === DefaultState.number) && char === ".",
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.number_16,
	first:(state, char) =>  state === DefaultState.number_16_start && is0_16(char),
			follow:(char) =>  is0_16(char);
	},
}, {
	state: DefaultState.number_16,
	first:(state, char) =>  state === DefaultState.number_16 && is0_16(char),
			follow:(char) =>  is0_16(char);
	},
}, {
	state: DefaultState.number_8,
	first:(state, char) =>  state === DefaultState.number_8 && is0_7(char),
			follow:(char) =>  is0_7(char);
	},
}, {
	state: DefaultState.double,
	first:(state, char) =>  state === DefaultState.double && isNumber(char),
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.number,
	first:(state, char) =>  state === DefaultState.number && isNumber(char),
			follow:(char) =>  isNumber(char) || char === ".";
	},
}, {
	state: DefaultState.point,
	first:(state, char) =>  state === DefaultState.default && char === ".",
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.double,
	first:(state, char) =>  state === DefaultState.point && isNumber(char),
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.macro_start,
	first:(state, char) =>  state === DefaultState.default && char === "#",
			follow:(char) =>  isLetter(char);
	},
}, {
	state: DefaultState.macro,
	first:(state, char) =>  state === DefaultState.macro_start && isLetter(char),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.macro,
	first:(state, char) =>  state === DefaultState.macro && (isLetter(char) || isNumber(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.dollar,
	first:(state, char) =>  state === DefaultState.default && char === "$",
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_hex,
	first:(state, char) =>  state === DefaultState.dollar && is0_16(char),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_macro_start,
	first:(state, char) =>  state === DefaultState.dollar && (isLetter(char) && !is0_16(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_macro_bad,
	first:(state, char) =>  state === DefaultState.dollar && char === "$",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.dollar_macro_start,
	first:(state, char) =>  state === DefaultState.dollar_hex && (isLetter(char) && !is0_16(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_hex,
	first:(state, char) =>  state === DefaultState.dollar_hex && is0_16(char),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_macro_end,
	first:(state, char) =>  (state === DefaultState.dollar_hex || state === DefaultState.dollar_macro_start) && char === "$",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.dollar_macro_start,
	first:(state, char) =>  state === DefaultState.dollar_macro_start && (isLetter(char) || isNumber(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.plus,
	first:(state, char) =>  state === DefaultState.default && char === "+",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.sub,
	first:(state, char) =>  state === DefaultState.default && char === "-",
			follow:(char) =>  char === ">";
	},
}, {
	state: DefaultState.mul,
	first:(state, char) =>  state === DefaultState.default && char === "*",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.assignment,
	first:(state, char) =>  state === DefaultState.default && char === "=",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.eq,
	first:(state, char) =>  state === DefaultState.assignment && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.gt,
	first:(state, char) =>  state === DefaultState.default && char === ">",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.gt_eq,
	first:(state, char) =>  state === DefaultState.gt && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.lt,
	first:(state, char) =>  state === DefaultState.default && char === "<",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.lt_eq,
	first:(state, char) =>  state === DefaultState.lt && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.field,
	first:(state, char) =>  state === DefaultState.default && (char === "(" || char === ")" || char === "[" || char === "]" || char === "{" || char === "}" || char === ","),
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.not,
	first:(state, char) =>  state === DefaultState.default && char === "!",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.not_eq,
	first:(state, char) =>  state === DefaultState.not && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.unkown,
	first:(state, char) =>  state ==DefaultState.default && /\S/.test(char),
			follow:(char) =>  /\S/.test(char);
	},
}];


class Evaluator {
    private toTokenDocument(tokens: Tokenize[]) {
        return new TokenDocument(tokens);
    }

    private parseTextMacroLine(lineToken: Tokenize, textMacro: TextMacroStatement) {
        if (lineToken.type === "comment" && lineToken.value.startsWith("//!")) {
            const subText = lineToken.value.replace(/^\/\/!/, "   ");
            
            parseTextMacro(Tokenizer.get(subText), textMacro);
        }
    }

    private parseTextMacro(tokens: Tokenize[]) {
        let inTextMacroRange = false;
        let textMacro:TextMacroStatement|null = null;
        const textMacroStatements:TextMacroStatement[] = [];
        const nonTextMacroTokens:Tokenize[] = [];
        this.lineForEach(tokens, (token, ts, isStart) => {
            if (isStart && /^\/\/!\s+textmacro\b/.test(token.value)) {
                if (inTextMacroRange) {
                    // this.error(new ParseError("textmacro", "Duplicate definition textmacro").setRange(token));
                } else {
                    inTextMacroRange = true;
                }
                textMacro = new TextMacroStatement().setRange(token);
                this.parseTextMacroLine(token, textMacro);
                textMacroStatements.push(textMacro);
            } else if (isStart && /^\/\/!\s+endtextmacro\b/.test(token.value)) {
                if (inTextMacroRange) {
                    inTextMacroRange = false;
                    if (textMacro) {
                        textMacro.isClose = true;
                        textMacro.end = token.end;
                    }
                } else {
                    this.error(new ParseError("textmacro", "Duplicate definition endtextmacro").setRange(token));
                }
            } else if (inTextMacroRange) {
                textMacro?.body.push(token);
            } else {
                nonTextMacroTokens.push(token);
            }
        });
    }

    private lineForEach(tokens: Tokenize[], handle: TokenHandle) {
        const tokenDocument = this.toTokenDocument(tokens);

        tokenDocument.forEach((ts) => {
            ts.forEach((t, index) => {
                const isStart = index == 0;
                handle(t, ts, isStart);
            });
        });

    }

    private error(error: ParseError) {

    }

    public parsing(tokens: Tokenize[], handle: TokenHandle) {
        this.parseTextMacro(tokens);
        return ;
        const tokenDocument = this.toTokenDocument(tokens);

        tokenDocument.forEach((ts) => {
            ts.forEach((t, index) => {
                const isStart = index == 0;
                handle(t, ts, isStart);
            });
        });

    }
}


function parsing(tokens: Tokenize[], then: () => void, error: (event: any) => void) {
    const state = new StateParam();
    const textMacroStatements:TextMacroStatement[] = [];
    const nonTextMacroTokens:Tokenize[] = [];
    new Evaluator().parsing(Tokenizer.get(`
    a
    //! textmacro temacname
    function a takes string b, integer b returns game
    //! endtextmacroa
    b
    `), (token, ts, isStart) => {
        if (isStart && /^\/\/!\s+textmacro\b/.test(token.value)) {
            if (state.inTextMacroRange) {
                // error(new ParseError("textmacro", "Duplicate definition textmacro").setRange(token));
            } else {
                state.inTextMacroRange = true;
                state.inTextMacroLine = true;
            }
            state.textMacroState = 0;
            state.textMacro = new TextMacroStatement().setRange(token);
            textMacroStatements.push(state.textMacro);
        } else if (isStart && /^\/\/!\s+endtextmacro\b/.test(token.value)) {
            if (state.inTextMacroRange) {
                state.inTextMacroRange = false;
                if (state.textMacro) {
                    state.textMacro.isClose = true;
                    state.textMacro.end = token.end;
                }
            } else {
                // error(new ParseError("textmacro", "Duplicate definition endtextmacro").setRange(token));
            }
        } else if (state.inTextMacroRange) {
            state.textMacro?.body.push(token);
        } else {
            nonTextMacroTokens.push(token);
        }
    });
    console.log(state.textMacro);
    
    new Evaluator().parsing(nonTextMacroTokens, (token, ts, isStart) => {
        console.log(token);
        return;
        const parseGlobals = () => {
            if (state.inGlobalsRange) {
    
            }
        };
        const parseFunction = () => {
            if (state.inFunctionRange) {
    
            } else if (state.inGlobalsRange) {
    
            }
        };
        const parseScope = () => {
            if (state.inScopeRange) {
                parseScope();
            } else if (state.inFunctionRange) {
                parseFunction();
            } else if (state.inGlobalsRange) {
                parseGlobals();
            }
        };
        const parseLibrary = () => {
            if (state.inScopeRange) {
                parseScope();
            } else if (state.inFunctionRange) {
                parseFunction();
            } else if (state.inGlobalsRange) {
                parseGlobals();
            }
        };
        const parseContent = () => {
            if (state.inLibraryRange) {
                parseLibrary();
            } else if (state.inScopeRange) {
                parseScope();
            } else if (state.inFunctionRange) {
                parseFunction();
            } else if (state.inGlobalsRange) {
                parseGlobals();
            } 
        };
        console.log(token);
    
        

        let func: FunctionStatement| null = null;

        if (isStart) {
            state.inFunctionLine = false;
            state.inLibraryLine = false;
            state.inScopeLine = false;
            state.inStructLine = false;
            state.inGlobalsLine = false;
            state.inTextMacroLine = false;

            state.functionState = 0;
            state.libraryState = 0;
            state.scopeState = 0;
            state.structState = 0;
            state.globalsState = 0;
            state.textMacroState = 0;

            state.inPrivate = false;
            state.inPublic = false;

            state.inStatic = false;

            if (isFunction(token)) {
                state.inFunctionRange = true;
                state.inFunctionLine = true;
                state.functionState = 0;
            } else if (isEndFunction(token)) {
                if (state.inFunctionRange) {
                    state.inFunctionRange = false;
                } else {
                    // Missing endfunction keyworld
                    error(new ParseError(ErrorTypeEnum.rep, `Redundant 'endfunction'.`).setRange(token));
                }
            } else if (isPrivate(token)) {
                if (state.inLibraryRange || state.inScopeRange) {
                    state.inPrivate = true;
                    state.modifierToken = token;
                } else {
                    error(new ParseError(ErrorTypeEnum.modifier, `'private' outside (library/scope) definition.`).setRange(token));
                }
            } else if (isPublic(token)) {
                if (state.inLibraryRange || state.inScopeRange) {
                    state.inPublic = true;
                    state.modifierToken = token;
                } else {
                    error(new ParseError(ErrorTypeEnum.modifier, `'public' outside (library/scope) definition.`).setRange(token));
                }
            } else if (isStatic(token)) {
                if (state.inStructRange) {
                    state.inStatic = true;
                    state.staticToken = token;
                } else {
                    error(new ParseError(ErrorTypeEnum.staticModifier, `'static' outside struct definition.`).setRange(token));
                }
            }
        }


    });
    
}


"patterns": [
    {
      "include": "#zinc"
    },
    {
      "include": "#jass-lua"
    },
    {
      "include": "#novjass"
    },
    {
      "include": "#vjass"
    }
  ]
