const DefaultTokenDefines: TokenizeDefine[] = [{
	state: DefaultState.div,
	first:(state, char) =>  state === DefaultState.default && char === "/",
			follow:(char) =>  char === "/" || char === "*";
	},
}, {
	state: DefaultState.comment_start,
	first:(state, char) =>  state === DefaultState.div && char === "/",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.comment_start,
	first:(state, char) =>  state === DefaultState.comment_start,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.block_comment_start,
	first:(state, char) =>  state === DefaultState.div && char === "*",
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_wait_end,
	first:(state, char) =>  state === DefaultState.block_comment_start && char === "*",
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_start,
	first:(state, char) =>  state === DefaultState.block_comment_start,
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_wait_end,
	first:(state, char) =>  state === DefaultState.block_comment_wait_end && char === "*",
			follow:(char) =>  char !== "";
	},
}, {
	state: DefaultState.block_comment_end,
	first:(state, char) =>  state === DefaultState.block_comment_wait_end && char === "/",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.string_start,
	first:(state, char) =>  state === DefaultState.default && char === "\"",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.string_escape,
	first:(state, char) =>  state === DefaultState.string_start && char === "\\",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.string_start,
	first:(state, char) =>  state === DefaultState.string_escape,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.string_end,
	first:(state, char) =>  state === DefaultState.string_start && char === "\"",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.string_start,
	first:(state, char) =>  state === DefaultState.string_start,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.id,
	first:(state, char) =>  state === DefaultState.default && (isLetter(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.mark_start,
	first:(state, char) =>  state === DefaultState.default && char === "'",
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.mark_end,
	first:(state, char) =>  state === DefaultState.mark_start && char === "'",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.mark_start,
	first:(state, char) =>  state === DefaultState.mark_start,
			follow:(char) =>  char !== "" && isNotNewLine(char);
	},
}, {
	state: DefaultState.id,
	first:(state, char) =>  state === DefaultState.id && (isLetter(char) || isNumber(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.number_0,
	first:(state, char) =>  state === DefaultState.default && char === "0",
			follow:(char) =>  char === "x" || char === "X" || is0_7(char) || char === ".";
	},
}, {
	state: DefaultState.number,
	first:(state, char) =>  state === DefaultState.default && is1_9(char),
			follow:(char) =>  isNumber(char) || char === ".";
	},
}, {
	state: DefaultState.number_16_start,
	first:(state, char) =>  state === DefaultState.number_0 && (char === "x" || char === "X"),
			follow:(char) =>  is0_16(char);
	},
}, {
	state: DefaultState.number_8,
	first:(state, char) =>  state === DefaultState.number_0 && is0_7(char),
			follow:(char) =>  is0_7(char);
	},
}, {
	state: DefaultState.double,
	first:(state, char) =>  (state === DefaultState.number_0 || state === DefaultState.number) && char === ".",
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.number_16,
	first:(state, char) =>  state === DefaultState.number_16_start && is0_16(char),
			follow:(char) =>  is0_16(char);
	},
}, {
	state: DefaultState.number_16,
	first:(state, char) =>  state === DefaultState.number_16 && is0_16(char),
			follow:(char) =>  is0_16(char);
	},
}, {
	state: DefaultState.number_8,
	first:(state, char) =>  state === DefaultState.number_8 && is0_7(char),
			follow:(char) =>  is0_7(char);
	},
}, {
	state: DefaultState.double,
	first:(state, char) =>  state === DefaultState.double && isNumber(char),
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.number,
	first:(state, char) =>  state === DefaultState.number && isNumber(char),
			follow:(char) =>  isNumber(char) || char === ".";
	},
}, {
	state: DefaultState.point,
	first:(state, char) =>  state === DefaultState.default && char === ".",
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.double,
	first:(state, char) =>  state === DefaultState.point && isNumber(char),
			follow:(char) =>  isNumber(char);
	},
}, {
	state: DefaultState.macro_start,
	first:(state, char) =>  state === DefaultState.default && char === "#",
			follow:(char) =>  isLetter(char);
	},
}, {
	state: DefaultState.macro,
	first:(state, char) =>  state === DefaultState.macro_start && isLetter(char),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.macro,
	first:(state, char) =>  state === DefaultState.macro && (isLetter(char) || isNumber(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_";
	},
}, {
	state: DefaultState.dollar,
	first:(state, char) =>  state === DefaultState.default && char === "$",
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_hex,
	first:(state, char) =>  state === DefaultState.dollar && is0_16(char),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_macro_start,
	first:(state, char) =>  state === DefaultState.dollar && (isLetter(char) && !is0_16(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_macro_bad,
	first:(state, char) =>  state === DefaultState.dollar && char === "$",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.dollar_macro_start,
	first:(state, char) =>  state === DefaultState.dollar_hex && (isLetter(char) && !is0_16(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_hex,
	first:(state, char) =>  state === DefaultState.dollar_hex && is0_16(char),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.dollar_macro_end,
	first:(state, char) =>  (state === DefaultState.dollar_hex || state === DefaultState.dollar_macro_start) && char === "$",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.dollar_macro_start,
	first:(state, char) =>  state === DefaultState.dollar_macro_start && (isLetter(char) || isNumber(char) || char === "_"),
			follow:(char) =>  isLetter(char) || isNumber(char) || char === "_" || char === "$";
	},
}, {
	state: DefaultState.plus,
	first:(state, char) =>  state === DefaultState.default && char === "+",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.sub,
	first:(state, char) =>  state === DefaultState.default && char === "-",
			follow:(char) =>  char === ">";
	},
}, {
	state: DefaultState.mul,
	first:(state, char) =>  state === DefaultState.default && char === "*",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.assignment,
	first:(state, char) =>  state === DefaultState.default && char === "=",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.eq,
	first:(state, char) =>  state === DefaultState.assignment && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.gt,
	first:(state, char) =>  state === DefaultState.default && char === ">",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.gt_eq,
	first:(state, char) =>  state === DefaultState.gt && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.lt,
	first:(state, char) =>  state === DefaultState.default && char === "<",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.lt_eq,
	first:(state, char) =>  state === DefaultState.lt && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.field,
	first:(state, char) =>  state === DefaultState.default && (char === "(" || char === ")" || char === "[" || char === "]" || char === "{" || char === "}" || char === ","),
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.not,
	first:(state, char) =>  state === DefaultState.default && char === "!",
			follow:(char) =>  char === "=";
	},
}, {
	state: DefaultState.not_eq,
	first:(state, char) =>  state === DefaultState.not && char === "=",
			follow:(char) =>  false;
	},
}, {
	state: DefaultState.unkown,
	first:(state, char) =>  state ==DefaultState.default && /\S/.test(char),
			follow:(char) =>  /\S/.test(char);
	},
}];